

var suggestions = new Array("Dagmar Mcvey", "Beckie Pinette", "Elina Marchal", "Becki Outten", "Tonie Pavelka", "Kary Podesta", "Ismael Karcher", "Tamesha Sigman", "Davis Duerr", "Martha Tuff", "Loren Mohler", "Haley Galeana", "Abbey Macleod", "Corene Dickison", "Rebekah Vigue", "Viva Mcraney", "Les Huizar", "Bradley Nery", "Trent Grassi", "Erlinda Guizar", "Levi Sheen", "Adela Stwart", "Brigitte Grayer", "Venetta Mull", "Matthew Sarcone", "Sybil Canchola", "Kayce Visconti", "Jennette Ruland", "Elfrieda Mroz", "Annabelle Kampen", "Linsey Klapp", "Vannesa Hogan", "Araceli Norgard", "Lon Loew", "Shayne Wycoff", "Merry Rierson", "Randell Howlett", "June Chang", "Alvin Patterson", "Jonna Buell", "Zack Rahe", "Jacklyn Cockett", "Ora Kitzmiller", "Pearle Zamorano", "Stephane Asuncion", "Trudi Pfeil", "Kandace Godfrey", "Fairy Pool", "Wanda Shields", "Russel Izzard");


	
	
	
	
	
	
/*
 * data get = function returns a object array where element 'key' will be used for search
 * data set = function that formats the setting data as : function(inputtext, inputid) => produces the formatted output.
 *
 */

function tokenize_set(obj, outp, dataget, dataset, outcallback, callbackkeyup)
{
	var oldins;
	var posi = -1;
	var words = new Array();
	var input;
	var key;
	var datuseid;
	var wids = new Array();
	
	var color_tsel = "#555555";
	var color_bsel = "#ecf1f6";
	var color_t = "#555555";
	var color_b = "#ffffff";
	
	
	setTimeout(lookat(), 100);
	
	setvis("hidden");
	
	obj.setAttribute('data-ttokentrigon', 0);
	
	obj.onkeydown = keydownm;
	obj.onkeyup = keyupm;
	







	function keydownm(event)
	{
		
		if (!event && window.event) event = window.event;
		if (event) key = event.keyCode;
		else key = event.which;
		
		lookat();
		
		if(key == 40 || key == 38) event.preventDefault();
	}
		
	function keyupm(event)
	{
		lookat();
		if(obj.getAttribute('data-ttokentrigon') == 0)
		{
			if(callbackkeyup) callbackkeyup(event);
			return 0;
		}
		
		if (key == 40) // down
		{
			if (words.length > 0 && posi < words.length-1)
			{
				if (posi >=0) setcolor(posi, color_b, color_t);
				else input = obj.value;
				setcolor(++posi, color_bsel, color_tsel);
			}
		}else if (key == 38){ // up
			if (words.length > 0 && posi >= 0)
			{
				if (posi >=1)
				{
					setcolor(posi, color_b, color_t);
					setcolor(--posi, color_bsel, color_tsel);
				}else{
					setcolor(posi, color_b, color_t);
					posi--;
				}
			}
		}else if (key == 27){ // esc
		
			setvis("hidden");
			posi = -1;
			oldins = input;
			
		}else if (key == 8){ // backspace
			posi = -1;
			oldins=-1;
		}else if(key == 13){ // enter
			settoken(outp.childNodes[posi].firstChild.nodeValue, -1, outp.childNodes[posi].getAttribute('data-ikid'));
			setvis("hidden");
			posi = -1;
		}else{
			if(callbackkeyup) callbackkeyup(event);
		}
	}
	
	function settoken(tv, nsv, id)
	{
		var objt = obj;

		if(nsv < 0) nsv = objt.selectionStart;
		
		var ssv = objt.getAttribute('data-ttokentrigonsv');

		objt.setAttribute('data-ttokentrigon', 0);
		
		var obfb = objt.value.substr(0, ssv - 1);
		var obeb = objt.value.substr(nsv);
		
		
		if(outcallback) outcallback(obfb +  dataset(tv, id) + obeb, obfb + tv + obeb);
		else objt.value = obfb +  dataset(tv, id) + obeb;
		
		objt.selectionStart = ssv + tv.length;
		
		objt.focus();
	}
	
	function setcolor(_posi, _color, _forg)
	{
		outp.childNodes[_posi].style.background = _color;
		outp.childNodes[_posi].style.color = _forg;
	}
	
	function setvis(visi)
	{
		outp.style.visibility = visi;
		if(visi == "hidden") obj.setAttribute('data-ttokentrigon', 0);
	}
	
	function lookat()
	{
		var objtc = obj.value.substr(obj.selectionStart - 1, 1);
		
		if(objtc == '@')
		{	
			obj.setAttribute('data-ttokentrigon', 1);
			obj.setAttribute('data-ttokentrigonsv', obj.selectionStart);
		}
		
		if(obj.getAttribute('data-ttokentrigon') == 0) return 0;
		
		var nsv = obj.getAttribute('data-ttokentrigonsv');
		
		var ins = obj.value.substr(nsv, obj.selectionStart - nsv).toLowerCase();
		
		if (oldins == ins) return;
		else if (posi > -1);
		else if (ins.length > 0)
		{
			words = getword(ins);
			
			if (words.length > 0)
			{
				clearoutput();
				for (var i=0;i<words.length; ++i) addword (words[i], wids[i]);
				setvis("visible");
				input = obj.value;
			}else{
				setvis("hidden");
				posi = -1;
			}
		}else{
			setvis("hidden");
			posi = -1;
		}
		oldins = ins;
	}
	
	function addword(word, id)
	{
		var sp = document.createElement("div");
		sp.appendChild(document.createTextNode(word));
		sp.onmouseover = mousehandler;
		sp.onmouseout = mousehandlerout;
		sp.onclick = mouseclick;
		sp.setAttribute('data-ikid', id);
		outp.appendChild(sp);
	}
	
	function clearoutput()
	{
		while(outp.hasChildNodes())
		{
			noten = outp.firstChild;
			outp.removeChild(noten);
		}
		posi = -1;
	}
	
	function getword(beginning)
	{
		var words = new Array();
		wids = new Array();
		
		var dset = dataget(beginning);
		
		for (var i=0;i<dset.length; ++i)
		{
			var j = -1;
			var correct = 1;
			var sugval = dset[i].toLowerCase();
			
			while (correct == 1 && ++j < beginning.length)
			{
				if (sugval.charAt(j) != beginning.charAt(j)) correct = 0;
			}
			
			if (correct == 1) words[words.length] = dset[i];
			if (correct == 1) wids[wids.length] = i;
		}
		
		return words;
	}
	
	function mousehandler()
	{
		for (var i=0;i<words.length;++i)
			setcolor (i, color_b, color_t);
	
		this.style.background = color_bsel;
		this.style.color= color_tsel;
	}
	
	function mousehandlerout()
	{
		this.style.background = color_b;
		this.style.color = color_t;
	}
	
	function mouseclick()
	{
		settoken(this.firstChild.nodeValue, -1, this.getAttribute('data-ikid'));
		setvis("hidden");
		posi = -1;
		oldins = this.firstChild.nodeValue;
	}
}







/*
 * data get = function returns a object array where element 'key' will be used for search
 * data set = function that formats the setting data as : function(inputtext, inputid) => produces the formatted output.
 *
 *//*
 function getCaretPosition(element) {
    var caretOffset = 0;
    if (typeof window.getSelection != "undefined") {
		if(window.getSelection().rangeCount)
		{
			var range = window.getSelection().getRangeAt(0);
			var preCaretRange = range.cloneRange();
			preCaretRange.selectNodeContents(element);
			preCaretRange.setEnd(range.endContainer, range.endOffset);
			caretOffset = preCaretRange.toString().length;
		}
    } else if (typeof document.selection != "undefined" && document.selection.type != "Control") {
        var textRange = document.selection.createRange();
        var preCaretTextRange = document.body.createTextRange();
        preCaretTextRange.moveToElementText(element);
        preCaretTextRange.setEndPoint("EndToEnd", textRange);
        caretOffset = preCaretTextRange.text.length;
    }
    return caretOffset;
} */

function getCaretPosition(element) {
	var start = 0, end = 0;
    var sel, range, priorRange;
    if (typeof window.getSelection != "undefined") {
		if(!window.getSelection().rangeCount) return 0;
        range = window.getSelection().getRangeAt(0);
        priorRange = range.cloneRange();
        priorRange.selectNodeContents(element);
        priorRange.setEnd(range.startContainer, range.startOffset);
        start = priorRange.toString().length;
        end = start + range.toString().length;
    } else if (typeof document.selection != "undefined" &&
            (sel = document.selection).type != "Control") {
        range = sel.createRange();
        priorRange = document.body.createTextRange();
        priorRange.moveToElementText(element);
        priorRange.setEndPoint("EndToStart", range);
        start = priorRange.text.length;
        end = start + range.text.length;
    }
    return  start;
}

 function getCaretPosition2(editableDiv)
 {
    var caretPos = 0, containerEl = null, sel, range;
    if (window.getSelection) {
        sel = window.getSelection();
		
        if (sel.rangeCount) {
			
			document.title = getCaretCharacterOffsetWithin(editableDiv);
            range = sel.getRangeAt(0);
            if (range.commonAncestorContainer.parentNode == editableDiv) {
                caretPos = range.endOffset;
            }
        }
    } else if (document.selection && document.selection.createRange) {
        range = document.selection.createRange();
        if (range.parentElement() == editableDiv) {
            var tempEl = document.createElement("span");
            editableDiv.insertBefore(tempEl, editableDiv.firstChild);
            var tempRange = range.duplicate();
            tempRange.moveToElementText(tempEl);
            tempRange.setEndPoint("EndToEnd", range);
            caretPos = tempRange.text.length;
        }
    }
    return caretPos;
}




function tokenize_setdiv(obj, outp, dataget, dataset, outcallback, callbackkeyup)
{
	var oldins;
	var posi = -1;
	var words = new Array();
	var input;
	var key;
	var datuseid;
	var wids = new Array();
	
	var color_tsel = "#555555";
	var color_bsel = "#ecf1f6";
	var color_t = "#555555";
	var color_b = "#ffffff";
	var lselwin;
	
	setTimeout(lookat(), 100);
	
	setvis("hidden");
	
	obj.setAttribute('data-ttokentrigon', 0);
	
	obj.onkeydown = keydownm;
	obj.onkeyup = keyupm;
	var lastcpos = 0;




	function insertTextAtCursor(text) {
		var sel, range, html;
		if (window.getSelection) {
			sel = window.getSelection();
			if (sel.getRangeAt && sel.rangeCount) {
				range = sel.getRangeAt(0);
				range.deleteContents();
				var b = document.createElement("span");
				b.innerHTML = text;
				range.insertNode(b); //document.createHTMLNode(text) );
				 
			}
		} else if (document.selection && document.selection.createRange) {
			document.selection.createRange().text = text;
		}
	}


	function keydownm(event)
	{
		
		if (!event && window.event) event = window.event;
		if (event) key = event.keyCode;
		else key = event.which;
		
		lastcpos  = getCaretPosition(obj);
		lookat();
		
		//$('sout').innerText = obj.innerHTML;
		
		
		
		if(obj.getAttribute('data-ttokentrigon') != 0)
			if(key == 40 || key == 38 || key == 13) event.preventDefault();
			
		
	}
		
	function keyupm(event)
	{
		lookat();
		if(obj.getAttribute('data-ttokentrigon') == 0) return 0;
		
		if (key == 40) // down
		{
			if (words.length > 0 && posi < words.length-1)
			{
				if (posi >=0) setcolor(posi, color_b, color_t);
				else input = obj.innerText;
				setcolor(++posi, color_bsel, color_tsel);
			}
		}else if (key == 38){ // up
			if (words.length > 0 && posi >= 0)
			{
				if (posi >=1)
				{
					setcolor(posi, color_b, color_t);
					setcolor(--posi, color_bsel, color_tsel);
				}else{
					setcolor(posi, color_b, color_t);
					posi--;
				}
			}
		}else if (key == 27){ // esc
		
			setvis("hidden");
			posi = -1;
			oldins = input;
			
		}else if (key == 8){ // backspace
			posi = -1;
			oldins=-1;
		}else if(key == 13){ // enter
			settoken(outp.childNodes[posi].firstChild.nodeValue, -1, outp.childNodes[posi].getAttribute('data-ikid'));
			setvis("hidden");
			posi = -1;
			return 0;
		}else{
			if(callbackkeyup) callbackkeyup(event);
		}
	}
	
	function settoken(tv, nsv, id)
	{
		var objt = obj;
		
		var selvals = lastcpos;//getCaretPosition(obj);

		if(nsv < 0) nsv = selvals + 1;
		
		var ssv = objt.getAttribute('data-ttokentrigonsv');

		objt.setAttribute('data-ttokentrigon', 0);
		
		var obfb = objt.innerText.substr(0, ssv - 1);
		var obeb = objt.innerText.substr(nsv);
		
		//if(outcallback) outcallback(obfb +  dataset(tv, id) + obeb, obfb + tv + obeb);
		//else objt.innerHTML = obfb +  dataset('@'+tv, id) + obeb;
		
		//$('sout').innerHTML = objt.innerHTML;
		objt.focus();
		//objt.pasteHTML(dataset('@'+tv, id));
		insertTextAtCursor(dataset(tv, id));
		
		//objt.selectionStart = ssv + tv.length;
		
		objt.focus();
	}
	
	function setcolor(_posi, _color, _forg)
	{
		outp.childNodes[_posi].style.background = _color;
		outp.childNodes[_posi].style.color = _forg;
	}
	
	function setvis(visi)
	{
		outp.style.visibility = visi;
		if(visi == "hidden") obj.setAttribute('data-ttokentrigon', 0);
	}
	
	function lookat()
	{
		var selvals = getCaretPosition(obj);
		var objtc = obj.innerText.substr(selvals - 1, 1);
		
		//document.title = selvals;
		
		if(objtc == '@')
		{	
			obj.setAttribute('data-ttokentrigon', 1);
			obj.setAttribute('data-ttokentrigonsv', selvals);
		}
		
		if(obj.getAttribute('data-ttokentrigon') == 0) return 0;
		
		var nsv = obj.getAttribute('data-ttokentrigonsv');
		
		var ins = obj.innerText.substr(nsv, selvals - nsv).toLowerCase();
		
		if (oldins == ins) return;
		else if (posi > -1);
		else if (ins.length > 0)
		{
			words = getword(ins);
			
			if (words.length > 0)
			{
				clearoutput();
				for (var i=0;i<words.length; ++i) addword (words[i], wids[i]);
				setvis("visible");
				input = obj.innerText;
			}else{
				setvis("hidden");
				posi = -1;
			}
		}else{
			setvis("hidden");
			posi = -1;
		}
		oldins = ins;
	}
	
	function addword(word, id)
	{
		var sp = document.createElement("div");
		sp.appendChild(document.createTextNode(word));
		sp.onmouseover = mousehandler;
		sp.onmouseout = mousehandlerout;
		sp.onclick = mouseclick;
		sp.setAttribute('data-ikid', id);
		outp.appendChild(sp);
	}
	
	function clearoutput()
	{
		while(outp.hasChildNodes())
		{
			noten = outp.firstChild;
			outp.removeChild(noten);
		}
		posi = -1;
	}
	
	function getword(beginning)
	{
		var words = new Array();
		wids = new Array();
		
		var dset = dataget(beginning);
		
		for (var i=0;i<dset.length; ++i)
		{
			var j = -1;
			var correct = 1;
			var sugval = dset[i].toLowerCase();
			
			while (correct == 1 && ++j < beginning.length)
			{
				if (sugval.charAt(j) != beginning.charAt(j)) correct = 0;
			}
			
			if (correct == 1) words[words.length] = dset[i];
			if (correct == 1) wids[wids.length] = i;
		}
		
		return words;
	}
	
	function mousehandler()
	{
		for (var i=0;i<words.length;++i)
			setcolor (i, color_b, color_t);
	
		this.style.background = color_bsel;
		this.style.color= color_tsel;
	}
	
	function mousehandlerout()
	{
		this.style.background = color_b;
		this.style.color = color_t;
	}
	
	function mouseclick()
	{
		settoken(this.firstChild.nodeValue, -1, this.getAttribute('data-ikid'));
		setvis("hidden");
		posi = -1;
		oldins = this.firstChild.nodeValue;
	}
}






